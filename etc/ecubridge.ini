;
; Logging Spport
;

[Logging]

;
; format - the line style/format, specified here:
; 
;   https://github.com/easylogging/easyloggingpp/blob/master/README.md#logging-format-specifiers
;

format          = [%datetime][%level] %msg

;
; filename - full path to where you want to write the log, any rotated
; copies will be placed in the same folder with a trailing ".1" etc.
;

filename        = /var/log/ecubridge

;
; level - how verbose to be. Levels of increasing verbosity are:
;
;   fatal
;   error
;   warning
;   info
;   debug
;   trace
;
; You must pick exactly one, and that one and all lower verbosity levels
; will be enabled.  So enabling warning, enables warning, error and fatal.
;

level           = trace

; 
; tofile - enable sending log messages to the log file
;

tofile          = true

; 
; tostdout - enable sending log messages to the standard output
;

tostdout        = true

;
; max_file_size - set the maximum size of the log file before we rotate
;

max_file_size   = 1024

;
; flush_threshold - how many log lines before we flush the log
;

flush_threshold = 1 

;
; rotate - how many rotated parts to keep
;

rotate          = 3

;
; PortMapper - this section deals with configuring what devices
; we have attached to the RS-232 ports (but via our USB cable)
;  
; NOTE: make sure device names are exact and consistent, they 
; linked across the PortMapper and individual device sections,
; so the names must be exactly the same.
; 

[PortMapper]

devices     = dl32, solodl
cable_type  = FT4232H

;
; dl32 - details related to the dl32 device
;

[dl32]

usb_slot    = 1
cable_color = red

;
; solodl - details related to the solodl
; 

[solodl]

usb_slot    = 2
cable_color = yellow

;
; ECU Bridge - this is daemon, the main controller.  Everything in
; this section is for configuring how the daemon works. The ECU Bridge
; has 15 channels, defined below.  If you need to patch different 
; things, you can use the "patch order" to redefine which stuff on the left
; goes to which stuff on the right.   You can't redefine the transforms
; on the left or what is on the righ though; they are defined by our
; expectation of devices/protocol connected.
;
; 
;   chan #  transrom  filter  patch order  filter   transform
;   ---------------------------------------------------------
;   chan 1  [dl32-1]  [pass]  1            [pass]   [rpm]
;   chan 2  [dl32-2]  [pass]  2            [pass]   [wheelspeed]
;   chan 3  [dl32-3]  [pass]  3            [pass]   [oilpress]
;   chan 4  [dl32-4]  [pass]  4            [pass]   [oiltemp]
;   chan 5  [dl32-5]  [pass]  5            [pass]   [watertemp]
;   chan 6  [null]    [null]  6            [pass]   [fuelpress]
;   chan 7  [null]    [null]  7            [pass]   [battvolt]
;   chan 8  [null]    [null]  8            [pass]   [throtang]
;   chan 9  [null]    [null]  9            [pass]   [manifpress]
;   chan 10 [null]    [null]  10           [pass]   [airchargetemp]
;   chan 11 [null]    [null]  11           [pass]   [exhtemp]
;   chan 12 [null]    [null]  12           [pass]   [lambda]
;   chan 13 [null]    [null]  13           [pass]   [fueltemp]
;   chan 14 [null]    [null]  14           [pass]   [gear]
;   chan 15 [null]    [null]  15           [pass]   [errorflag]
;
; DL-32 data comes in on the left and goes out on the right to the solodl
; along with possibly other data.  You can fitler both at the input and 
; the output side. By chaning the patch order you can rewire which things
; on the left go to which things on the right.  If you want dl31-1 to go
; to oilpress, then you have ot make its patch order be 3...and move 1
; somewhere else (i.e. now dl32-3 would be rpm).
;

[ECU Bridge]

; patches

patch_1  = 1
patch_2  = 2
patch_3  = 3
patch_4  = 4
patch_5  = 5
patch_6  = 6
patch_7  = 7 
patch_8  = 8 
patch_9  = 9 
patch_10 = 10
patch_11 = 11
patch_12 = 12
patch_13 = 13
patch_14 = 14
patch_15 = 15

; 
; The data tap ports define where the bridge will multi-cast monitoring
; data out to.  Any program(s) can monitor just by listening to the 
; multi-casts.  They don't have to understand protocol of DL-32 or 
; SoloDL etc.  They just get the data as normal numbers. There are 3 taps:
;
;   raw    - this is the raw input from the DL-32
;   normal - this is data after any input side transform/filtering
;   output - this is the final data sent to the SoloDL
;
; The multi-cast ports are UDP and the address for the multi-cast 
; group is 'group_addr' (must be a class "D" address)
;
; NOTE: these ports should also be added to /etc/services so they
; are well known and not in conflict with any other ports.
;

data_tap_raw    = 6100
data_tap_normal = 6101
data_tap_output = 6102
group_addr      = 226.1.1.1

; 
; The command port is a straight TCP socket we use to chat with 
; the daemon.
;

command_port    = 5900

;
; input side - this defines the initial filtering for bringing data in
; from the DL-32, each channel can be filtered before we consider it
; to be normal data, the possible filters:
; 
;   passthrough - as is
;   null - 0
;   manual - you pick a constant value (i.e. "manual,3") 
;

[input filter]

chan_1  = passthrough
chan_2  = passthrough
chan_3  = passthrough
chan_4  = passthrough
chan_5  = passthrough
chan_6  = null
chan_7  = null
chan_8  = null
chan_9  = null
chan_10 = null
chan_11 = null
chan_12 = null
chan_13 = null
chan_14 = null
chan_15 = null

;
; output side - this defines the initial filtering for sending data out
; to the SoloDL, each channel can be filtered before we actuall pass it
; to the solodl, the possible filters:
; 
;   passthrough - as is
;   null - 0
;   manual - you pick a constant value (i.e. "manual,3") 
;

[output filter]

chan_1  = passthrough
chan_2  = passthrough
chan_3  = passthrough
chan_4  = passthrough
chan_5  = passthrough
chan_6  = passthrough
chan_7  = passthrough
chan_8  = passthrough
chan_9  = passthrough
chan_10 = passthrough
chan_11 = passthrough
chan_12 = passthrough
chan_13 = passthrough 
chan_14 = passthrough
chan_15 = passthrough

